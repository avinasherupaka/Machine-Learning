source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Sys.getenv(GITHUB_PAT="ee754923b8c567697cda48edd053a4e34924f00d")
Sys.getenv("GITHUB_PAT")
library(synonyms)
source('~/.active-rstudio-document')
source("/Users/aerup/Documents/P360_R_Credentials.txt")
library(authenticator)
source("/Users/aerup/Documents/P360_R_Credentials.txt")
source('~/.active-rstudio-document')
Sys.getenv('CLIENT_SECRET')
source('~/.active-rstudio-document')
source("/Users/aerup/Documents/P360_R_Credentials.txt")
Sys.getenv()
Sys.getenv('CLIENT_ID')
Sys.getenv('CLIENT_SECRET')
source("/Users/aerup/Documents/P360_R_Credentials.txt")
library(authenticator)
library(httr)
library(dplyr)
library(synonyms)
library(tidyjson)
createPingToken()
Sys.setenv(BASE_SYN_URL='https://product360.agro.services/products/v1')
products<-list('NF6487','NF6737')
Synonyms<-ProdSynQuery(products)
parentids<-unique(as.list(Synonyms$id))
Parents<-ProdSynParentQuery(parentids)
source('~/.active-rstudio-document')
createPingToken()
source("/Users/aerup/Documents/P360_R_Credentials.txt")
library(authenticator)
library(httr)
library(dplyr)
library(synonyms)
library(tidyjson)
createPingToken()
Sys.setenv(BASE_SYN_URL='https://product360.agro.services/products/v1')
createPingToken()
library(tidyjson)
createPingToken()
source('~/.active-rstudio-document')
Sys.unsetenv('GITHUB_PAT')
b<-function(){
install.packages('devtools')
library(devtools)
}
tryCatch(library(devtools),error=function(e) b())
library(httr)
set_config(config(ssl_verifypeer = 0L))
a<-function(){
install.packages('dplyr')
library(dplyr)
}
tryCatch(library(dplyr),error=function(e) a())
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
tidyjsonversion <- ip %>% select(Package,Version) %>% filter(Package=='tidyjson')
synonymsversion <- ip %>% select(Package,Version) %>% filter(Package=='synonyms')
trialsversion <- ip %>% select(Package,Version) %>% filter(Package=='trials')
devtoolsversion <- ip %>% select(Package,Version) %>% filter(Package=='devtools')
if(as.character(devtoolsversion$Version)!='1.12.0.9000'){
devtools::install_github("hadley/devtools")
}
if(as.character(tidyjsonversion$Version)!='0.2.1.9000'
|| !("tidyjson" %in% rownames(installed.packages()))){
devtools::install_github("jeremystan/tidyjson")
}
source("/Users/aerup/Documents/P360_R_Credentials.txt")
if(!("authenticator" %in% rownames(installed.packages()))){
devtools::install_github(repo = "GraphRoots/authenticator",
host = "https://github.platforms.engineering/api/v3")
}
if(as.character(trialsversion$Version)!='0.1.0000' || !("trials" %in% rownames(installed.packages()))){
h<-function(){
devtools::install_github(repo = "GraphRoots/product-trials-client-R",ref='v0.1.0',
host = "https://github.platforms.engineering/api/v3")
}
tryCatch(devtools::install_github(repo = "GraphRoots/product-trials-client-R",host = "https://github.platforms.engineering/api/v3"),
error=function(e) h())
}
if(!("tidyr" %in% rownames(installed.packages()))){
install.packages('tidyr')
}
if(!("jsonlite" %in% rownames(installed.packages()))){
install.packages('jsonlite')
}
if(as.character(synonymsversion$Version)!='0.1.2'
|| !("synonyms" %in% rownames(installed.packages()))){
devtools::install_github(repo = 'Product360-Data/R-Product-Synonyms-Client',
host = "https://github.platforms.engineering/api/v3")
}
devtools::install_github(repo = "GraphRoots/inceptionR",
ref='0.8.0',host = "https://github.platforms.engineering/api/v3")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(synonymsversion)
View(Synonyms)
View(Synonyms)
View(Parents)
View(Synonyms)
View(Parents)
View(Synonyms)
print('Hello World !')
install.packages("Numpy")
setwd("~/Documents/Udemy-Machine-Learning/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
data_set = read.csv('Data.csv')
View(data_set)
data_set$Age = ifelse(is.na(data_set$Age),
ave(data_set$Age, FUN = function(x) mean(x,na.rm = TRUE)),
data_set$Age)
View(data_set)
data_set$Salary = ifelse(is.na(data_set$Salary),
ave(data_set$Salary, FUN = function(x) mean(x,na.rm = TRUE)),
data_set$Salary)
View(data_set)
data_set$Country = factor(data_set$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
data_set$Purchased = factor(data_set$Purchased,
levels = c('Yes', 'No'),
labels = c(1, 0))
View(data_set)
installed.packages('caTools')
install.packages("caTools")
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
split = sample.split(data_set$Purchased, SplitRatio = 0.8)
split
set.seed(123)
split = sample.split(data_set$Purchased, SplitRatio = 0.8)
training_set = sub(data_set, split ==TRUE)
test_set = sub(data_set, split ==FALSE)
training_set = sub(data_set, split ==TRUE)
test_set = sub(data_set, split ==FALSE)
training_set = subsetdata_set, split ==TRUE)
test_set = subset(data_set, split ==FALSE)
training_set = subset(data_set, split ==TRUE)
test_set = subset(data_set, split ==FALSE)
View(training_set)
View(test_set)
training_set
training_set[, 2:3] =  scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
training_set
setwd("~/Documents/Udemy-Machine-Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
data_set = read.csv('Salary_Data.csv')
library(caTools)
set.seed(123)
split = sample.split(data_set$Salary, SplitRatio = 2/3)
training_set = subset(data_set, split ==TRUE)
test_set = subset(data_set, split ==FALSE)
View(training_set)
View(test_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
install.packages("ggplot2")
library(ggplot2)
# Visualising the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience , y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Visualising the test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = test_set$YearsExperience , y = predict(regressor, newdata = test_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
